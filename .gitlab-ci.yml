workflow:
  rules:

    # If the branch is empty do not run the pipeline
    - if: $CI_COMMIT_BRANCH
      changes:
        compare_to: 'refs/heads/main'
        paths:
          - '*'
    # When opening a merge request run the pipeline
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # If a merge request has been opened for the branch do not run the branch pipeline
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    # When committing run the pipeline
    - if: $CI_COMMIT_BRANCH

services:
  - postgres:latest

variables:
  POSTGRES_DB: ToothTrekTest
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: test
  POSTGRES_HOST_AUTH_METHOD: trust

stages:
  - build
  - test

# Flutter Frontend
build-frontend:
  image: "ghcr.io/cirruslabs/flutter:3.16.2"
  stage: build

  script:
    - cd Website/Frontend
    - flutter pub get
    - flutter build web 
  tags:
    - docker
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - $CI_PROJECT_DIR/Website/Frontend/.dart_tool/
      - $CI_PROJECT_DIR/Website/Frontend/build/web/

test-frontend:
  stage: test
  needs: ["build-frontend"]

  image: "ghcr.io/cirruslabs/flutter:3.16.2"
  tags:
    - docker

  script:
    - cd Website/Frontend
    - flutter test

# Express Backend
build-backend:
  stage: build

  image: node:18
  tags:
    - docker

  script:
    - cd Website/Backend
    - npm install

test-backend:
  stage: test
  needs: ["build-backend"]

  image: node:18
  tags:
    - docker

  script:
    - cd Website/Backend
    - npm test 

  # Allow failure til we have tests
  allow_failure: true

# Dentist UI

build-dentistUI:
  stage: build

  image: node:18
  tags:
    - docker

  script:
    - cd DentistUI
    - npm install

test-dentistUI:
  stage: test
  needs: ["build-dentistUI"]

  image: node:18
  tags:
    - docker

  script:
    - cd DentistUI
    - npm test 

  # Allow failure til we have tests
  allow_failure: true

# Java Middleware

# !!! Add one per service !!!

# Template
build-template-middleware:
  stage: build

  image: maven:3.9.5-eclipse-temurin-17-alpine
  tags:
    - docker

  script:
    - cd Middleware/template
    - mvn --show-version install -DskipTests

test-template-middleware:
  stage: test
  needs: ["build-template-middleware"]


  image: maven:3.9.5-eclipse-temurin-17-alpine
  tags:
    - docker

  variables:
    POSTGRES_DB: test_template_db

  script:
    - apk update && apk add postgresql-client
    - cd Middleware/template/src/main/resources
    - PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -tc "SELECT 1 FROM pg_database WHERE datname = 'test_template_db'" | grep -q 1 || PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -c "CREATE DATABASE test_template_db"
    - PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -d test_template_db -f schema.sql
    - cd ../../../
    - mvn --show-version test


# Java Middleware - Logs
build-logs-middleware:
  stage: build

  image: maven:3.9.5-eclipse-temurin-17-alpine
  tags:
    - docker

  script:
    - cd Middleware/Logs
    - mvn --show-version install -DskipTests

test-logs-middleware:
  stage: test
  needs: ["build-logs-middleware"]

  image: maven:3.9.5-eclipse-temurin-17-alpine
  tags:
    - docker
  
  variables:
    POSTGRES_DB: test_logs_db

  script:
    - apk update && apk add postgresql-client
    - cd Middleware/Logs/src/main/resources
    - PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -tc "SELECT 1 FROM pg_database WHERE datname = 'test_logs_db'" | grep -q 1 || PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -c "CREATE DATABASE test_logs_db"
    - PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -d test_logs_db -f schema.sql
    - cd ../../../
    - mvn --show-version test

# Java Middleware - Bookings
build-bookings-middleware:
  stage: build

  image: maven:3.9.5-eclipse-temurin-17-alpine
  tags:
    - docker

  script:
    - cd Middleware/bookings
    - mvn --show-version install -DskipTests

test-bookings-middleware:
  stage: test
  needs: ["build-bookings-middleware"]

  image: maven:3.9.5-eclipse-temurin-17-alpine
  tags:
    - docker

  variables:
    POSTGRES_DB: test_booking_db

  script:
    - apk update && apk add postgresql-client
    - cd Middleware/bookings/src/main/resources
    - PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -tc "SELECT 1 FROM pg_database WHERE datname = 'test_booking_db'" | grep -q 1 || PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -c "CREATE DATABASE test_booking_db"
    - PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -d test_booking_db -f schema.sql
    - cd ../../../
    - mvn --show-version test


# Java Middleware - Notifications
build-notifications-middleware:
  stage: build

  image: maven:3.9.5-eclipse-temurin-17-alpine
  tags:
    - docker

  script:
    - cd Middleware/notifications
    - mvn --show-version install -DskipTests

test-notifications-middleware:
  stage: test
  needs: ["build-notifications-middleware"]


  image: maven:3.9.5-eclipse-temurin-17-alpine
  tags:
    - docker

  variables:
    POSTGRES_DB: test_notification_db

  script:
    - apk update && apk add postgresql-client
    - cd Middleware/notifications/src/main/resources
    - PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -tc "SELECT 1 FROM pg_database WHERE datname = 'test_notification_db'" | grep -q 1 || PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -c "CREATE DATABASE test_notification_db"
    - PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -d test_notification_db -f schema.sql
    - cd ../../../
    - mvn --show-version test